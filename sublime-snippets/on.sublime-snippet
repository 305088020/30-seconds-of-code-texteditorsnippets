<snippet>
	<content><![CDATA[const on = (el, evt, fn, opts = {}) => {
  const delegatorFn = e => e.target.matches(opts.target) && fn.call(e.target, e);
  el.addEventListener(evt, opts.target ? delegatorFn : fn, opts.options || false);
  if (opts.target) return delegatorFn;
};]]></content>
	<description>Adds an event listener to an element with the ability to use event delegation.  Use `EventTarget.addEventListener()` to add an event listener to an element. If there is a `target` property supplied to the options object, ensure the event target matches the target specified and then invoke the callback by supplying the correct `this` context. Returns a reference to the custom delegator function, in order to be possible to use with [`off`](#off). Omit `opts` to default to non-delegation behavior and event bubbling.</description>
	<tabTrigger>on</tabTrigger>
	<scope>source.js</scope>
</snippet>